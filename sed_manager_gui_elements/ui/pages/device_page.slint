import { DeviceDescription } from "../data/device_description.slint";
import { AlternativeChild, AlternativeLayout } from "../widgets/alternative_layout.slint";
import { ExtendedStatus, Status } from "../data/status.slint";
import { Activity } from "../data/activity.slint";
import { LockingRange } from "../data/locking_range.slint";

import { Description } from "../info/description.slint";
import { TakeOwnership } from "../configure/take_owneship.slint";
import { ActivateLocking } from "../configure/activate_locking.slint";
import { LockingRanges } from "../configure/locking_ranges.slint";
import { Revert } from "../configure/revert.slint";
import { State } from "../state.slint";

export component DevicePage {
    in property <int> device-idx: 0;
    private property <Activity> current-activity: Activity.description;
    function set-current-activity(activity: Activity) {
        State.cleanup-session(device-idx);
        if activity == Activity.description {
            State.discover(device-idx);
        }
        self.current-activity = activity;
    }
    public function gained-focus() {
        if current-activity == Activity.description && State.descriptions[device-idx].discovery-status.status == Status.loading {
            State.discover(device-idx);
        }
    }
    VerticalLayout {
        if current-activity == Activity.description: Description {
            description: State.descriptions[device-idx];
            select-activity(activity) => {
                set-current-activity(activity);
            }
        }
        if current-activity == Activity.take-ownership: TakeOwnership {
            device-name: State.descriptions[device-idx].identity.name;
            extended-status: State.configure[device-idx].extended-status;
            back => {
                set-current-activity(Activity.description);
            }
            take-ownership(new-password) => {
                State.take-ownership(device-idx, new-password);
            }
        }
        if current-activity == Activity.activate-locking: ActivateLocking {
            device-name: State.descriptions[device-idx].identity.name;
            extended-status: State.configure[device-idx].extended-status;
            back => {
                set-current-activity(Activity.description);
            }
            activate-locking(sid-password, new-admin1-password) => {
                State.activate-locking(device-idx, sid-password, new-admin1-password)
            }
        }
        if current-activity == Activity.locking-ranges: LockingRanges {
            device-name: State.descriptions[device-idx].identity.name;
            login-status: State.configure[device-idx].extended-status;
            errors: State.configure[device-idx].locking-ranges.errors;
            range-names: State.configure[device-idx].locking-ranges.names;
            range-properties: State.configure[device-idx].locking-ranges.properties;
            back => {
                set-current-activity(Activity.description);
            }
            login-locking-ranges(password) => {
                State.login-locking-ranges(device-idx, password);
            }
            list-locking-ranges => {
                State.list-locking-ranges(device-idx);
            }
            set-locking-range(range-idx, value) => {
                State.set-locking-range(device-idx, range-idx, value);
            }
        }
        if current-activity == Activity.revert: Revert {
            device-name: State.descriptions[device-idx].identity.name;
            extended-status: State.configure[device-idx].extended-status;
            back => {
                set-current-activity(Activity.description);
            }
            revert(use-psid, password, include-admin) => {
                State.revert(device-idx, use-psid, password, include-admin);
            }
        }
    }
}
