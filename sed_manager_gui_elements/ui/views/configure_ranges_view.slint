import { ConfigView } from "config_view.slint";
import { StatusPopup } from "one_click_config_view.slint";
import { LineEdit, Button, CheckBox, ScrollView, Palette } from "std-widgets.slint";
import { ActionResult } from "../data/action_result.slint";
import { ContentStatus } from "../data/content_status.slint";
import { LockingRange } from "../data/locking_range.slint";
import { PaletteExtra, VerticalSeparator } from "../widgets/visual.slint";
import { NavigationButton, NavigationDirection } from "../widgets/navigation_button.slint";


component LockingRangeHeader {
    out property <length> range-start-width: range-start.width;
    out property <length> range-end-width: range-end.width;
    out property <length> read-lock-enabled-width: read-lock-enabled.width;
    out property <length> write-lock-enabled-width: write-lock-enabled.width;
    out property <length> read-locked-width: read-locked.width;
    out property <length> write-locked-width: write-locked.width;
    HorizontalLayout {
        spacing: 4px;
        padding: 4px;
        name := Text {
            text: "Name";
            min-width: 80px;
            horizontal-alignment: center;
            vertical-alignment: center;
            horizontal-stretch: 100;
        }

        VerticalSeparator { }

        range-start := Text {
            text: "Start LBA";
            horizontal-alignment: center;
            vertical-alignment: center;
            min-width: 80px;
            max-width: 120px;
            horizontal-stretch: 16;
        }

        VerticalSeparator { }

        range-end := Text {
            text: "End LBA";
            horizontal-alignment: center;
            vertical-alignment: center;
            min-width: 80px;
            max-width: 120px;
            horizontal-stretch: 16;
        }

        VerticalSeparator { }

        read-lock-enabled := Text {
            text: "Read lock\nenabled";
            horizontal-alignment: center;
            vertical-alignment: center;
        }

        VerticalSeparator { }

        write-lock-enabled := Text {
            text: "Write lock\nenabled";
            horizontal-alignment: center;
            vertical-alignment: center;
        }

        VerticalSeparator { }

        read-locked := Text {
            text: "Read\nlocked";
            horizontal-alignment: center;
            vertical-alignment: center;
        }

        VerticalSeparator { }

        write-locked := Text {
            text: "Write\nlocked";
            horizontal-alignment: center;
            vertical-alignment: center;
        }
    }
}

component LockingRangeView {
    private property <bool> dirty: false;
    in-out property <LockingRange> locking-range;
    in property <length> range-start-width;
    in property <length> range-end-width;
    in property <length> read-lock-enabled-width;
    in property <length> write-lock-enabled-width;
    in property <length> read-locked-width;
    in property <length> write-locked-width;
    callback update-range(value: LockingRange);
    function update() {
        dirty = true;
    }
    HorizontalLayout {
        spacing: 4px;
        padding: 4px;
        HorizontalLayout {
            Text {
                text: dirty ? "*" + locking-range.name : locking-range.name;
                wrap: char-wrap;
                overflow: elide;
                vertical-alignment: center;
                font-italic: dirty;
            }
        }

        VerticalSeparator { }

        edit-start-lba := LineEdit {
            text: locking-range.range-start;
            width: range-start-width;
            horizontal-alignment: right;
            input-type: number;
            accepted(text) => {
                locking-range.range-start = text.to-float();
                locking-range.range-end = Math.max(locking-range.range-start, locking-range.range-end);
                edit-end-lba.text = locking-range.range-end;
                self.clear-focus();
                root.update-range(root.locking-range);
            }
        }

        VerticalSeparator { }

        edit-end-lba := LineEdit {
            text: locking-range.range-end;
            width: range-end-width;
            horizontal-alignment: right;
            input-type: number;
            accepted(text) => {
                locking-range.range-end = text.to-float();
                locking-range.range-start = Math.min(locking-range.range-start, locking-range.range-end);
                edit-start-lba.text = locking-range.range-start;
                self.clear-focus();
                root.update-range(root.locking-range);
            }
        }

        VerticalSeparator { }

        HorizontalLayout {
            alignment: center;
            width: read-lock-enabled-width;
            CheckBox {
                checked: locking-range.read-lock-enabled;
                toggled => {
                    locking-range.read-lock-enabled = self.checked;
                    root.update-range(root.locking-range);
                }
            }
        }

        VerticalSeparator { }

        HorizontalLayout {
            alignment: center;
            width: write-lock-enabled-width;
            CheckBox {
                checked: locking-range.write-lock-enabled;
                toggled => {
                    locking-range.write-lock-enabled = self.checked;
                    root.update-range(root.locking-range);
                }
            }
        }

        VerticalSeparator { }

        HorizontalLayout {
            alignment: center;
            width: read-locked-width;
            CheckBox {
                checked: locking-range.read-locked;
                toggled => {
                    locking-range.read-locked = self.checked;
                    root.update-range(root.locking-range);
                }
            }
        }

        VerticalSeparator { }

        HorizontalLayout {
            alignment: center;
            width: write-locked-width;
            CheckBox {
                checked: locking-range.write-locked;
                toggled => {
                    locking-range.write-locked = self.checked;
                    root.update-range(root.locking-range);
                }
            }
        }
    }
}

component RangeQueryView {
    in-out property <string> password;
    in property <ActionResult> result;
    callback query-ranges(password: string);
    HorizontalLayout {
        alignment: center;
        VerticalLayout {
            vertical-stretch: 1.0;
            padding: 8px;
            spacing: 6px;
            alignment: center;
            Text {
                text: "Enter Admin1 password:";
            }

            password := LineEdit {
                input-type: InputType.password;
                text <=> root.password;
            }

            Button {
                primary: true;
                text: "Configure locking ranges";
                clicked => {
                    query-ranges(root.password)
                }
            }
        }
    }
}

component RangeEditView {
    in property <[string]> error-log;
    in property <[LockingRange]> locking-ranges;
    callback update-range(range_idx: int, value: LockingRange);
    VerticalLayout {
        ScrollView {
            vertical-scrollbar-policy: always-off;
            min-width: 360px;
            min-height: 120px;
            VerticalLayout {
                header := LockingRangeHeader { }

                ScrollView {
                    horizontal-scrollbar-policy: always-off;
                    ranges := VerticalLayout {
                        alignment: start;
                        for locking-range[i] in locking-ranges: Rectangle {
                            background: Math.mod(i, 2) == 0 ? PaletteExtra.accent.with-alpha(0.1) : #00000000;
                            min-width: range-view.min-width;
                            min-height: range-view.min-height;
                            range-view := LockingRangeView {
                                locking-range: locking-range;
                                preferred-width: 100%;
                                preferred-height: 100%;
                                range-start-width: header.range-start-width;
                                range-end-width: header.range-end-width;
                                read-lock-enabled-width: header.read-lock-enabled-width;
                                write-lock-enabled-width: header.write-lock-enabled-width;
                                read-locked-width: header.read-locked-width;
                                write-locked-width: header.write-locked-width;
                                update-range(value) => {
                                    root.update-range(i, value);
                                }
                            }
                        }
                    }
                }
            }
        }

        collapse-error := NavigationButton {
            text: "Log";
            navigation-direction: NavigationDirection.up;
            height: 24px;
            text-color: root.error-log.length == 0 ? Palette.control-foreground : PaletteExtra.error-foreground;
            clicked => {
                self.navigation-direction = self.navigation-direction == NavigationDirection.up ? NavigationDirection.down : NavigationDirection.up;
            }
        }

        if collapse-error.navigation-direction == NavigationDirection.down: ScrollView {
            VerticalLayout {
                padding: 8px;
                min-height: 32px;
                for error in root.error-log: Text {
                    text: error;
                    color: PaletteExtra.error-foreground;
                }
            }
        }
    }
}

export component ConfigureRangesView inherits ConfigView {
    config-name: "Locking ranges";
    config-icon: @image-url("../../images/shape/hash.svg");
    in property <ActionResult> query-result: { status: ContentStatus.error };
    in property <[string]> error-log;
    in property <[LockingRange]> locking-ranges;
    out property <string> password;
    callback update-range(range_idx: int, value: LockingRange);
    callback query-ranges(password: string);
    status-popup := StatusPopup {
        x: form.x + (form.width - self.width) / 2;
        y: form.y + (form.height - self.height) / 2;
        close-policy: no-auto-close;
        result: query-result;
        action-icon: root.config-icon;
        back => {
            root.back()
        }
        changed result => {
            if query-result.status == ContentStatus.success {
                self.close()
            }
        }
    }

    form := VerticalLayout {
        if query_result.status != ContentStatus.success: RangeQueryView {
            result: query-result;
            password <=> root.password;
            query-ranges(password) => {
                status-popup.show();
                query-ranges(password);
            }
        }
        if query_result.status == ContentStatus.success: RangeEditView {
            error-log: error-log;
            locking-ranges: locking-ranges;
            update-range(range-idx, value) => {
                root.update-range(range-idx, value)
            }
        }
    }
}

global ExampleRanges {
    out property <[LockingRange]> locking-ranges: [
        {
            name: "GlobalRange",
            range-start: 0,
            range-end: 0,
            read-lock-enabled: false,
            write-lock-enabled: false,
            read-locked: false,
            write-locked: false,
        },
        {
            name: "Range1",
            range-start: 0,
            range-end: 0,
            read-lock-enabled: false,
            write-lock-enabled: false,
            read-locked: false,
            write-locked: false,
        },
        {
            name: "Range2",
            range-start: 0,
            range-end: 0,
            read-lock-enabled: false,
            write-lock-enabled: false,
            read-locked: false,
            write-locked: false,
        },
    ];
}

export component LivePreviewTest_RangeEditView inherits RangeEditView {
    locking-ranges: ExampleRanges.locking-ranges;
}

export component LivePreviewTest_Ranges inherits ConfigureRangesView {
    query_result: { status: ContentStatus.success };
    locking-ranges: ExampleRanges.locking-ranges;
    device-name: "Foo Device";
    update-range(range-idx, value) => {
        root.error-log = ["[Error] " + value.name + ": could not set range, this is a live preview"];
    }
}
