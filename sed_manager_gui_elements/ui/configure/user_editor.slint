import { ExtendedStatus, Status } from "../data/status.slint";
import { ConfigView } from "config_view.slint";
import { LoginView } from "login_view.slint";
import { User } from "../data/user.slint";
import { Table, Cell } from "../widgets/table.slint";
import { LineEdit, CheckBox, Button } from "std-widgets.slint";
import { Icons } from "../icons.slint";
import { PaletteExtra } from "../widgets/visual.slint";
import { ToastMessage } from "../widgets/toast_message.slint";
import { PrototypePopup } from "../widgets/prototype_popup.slint";
import { RepeatedPasswordEdit } from "../widgets/password.slint";
import { UserEditorState, UserList } from "../state.slint";
import { StatusIndicator } from "../widgets/progress.slint";

global TableDesc {
    out property <[string]> column-names: ["Enabled", "Friendly name", "Password"];
    out property <[length]> column-widths: [80px, 140px, 80px];
    out property <[float]> column-stretches: [0.2, 1.0, 0.2];
    out property <length> row-height: 32px;
}

component UserRow {
    in property <[length]> column-widths: TableDesc.column-widths;
    in property <[float]> column-stretches: TableDesc.column-stretches;
    in property <length> row-height: TableDesc.row-height;
    in property <int> user-idx;
    in property <User> user;
    in property <Status> status;
    private property <bool> enabled: status != Status.loading;
    callback set-enabled(enabled: bool);
    callback set-name(name: string);
    callback set-password();
    changed user => {
        name.text = user.name;
        user-enabled.checked = user.enabled;
    }
    changed status => {
        if status == Status.error {
            name.text = user.name;
            user-enabled.checked = user.enabled;
        }
    }
    HorizontalLayout {
        Cell {
            min-width: root.column-widths[0];
            horizontal-stretch: root.column-stretches[0];
            height: row-height;
            row-idx: user-idx;
            column-idx: 0;
            user-enabled := CheckBox {
                checked: user.enabled;
                enabled: enabled;
                toggled => {
                    set-enabled(self.checked);
                }
            }
        }

        Cell {
            min-width: root.column-widths[1];
            horizontal-stretch: root.column-stretches[1];
            height: row-height;
            row-idx: user-idx;
            column-idx: 1;
            name := LineEdit {
                width: parent.width;
                input-type: text;
                horizontal-alignment: right;
                text: user.name;
                enabled: enabled;
                accepted(text) => {
                    if self.text.character-count <= 32 {
                        self.clear-focus();
                        set-name(self.text);
                    } else {
                        ToastMessage.show("Name must be no more than 32 characters", PaletteExtra.error-foreground);
                    }
                }
            }
        }

        Cell {
            min-width: root.column-widths[2];
            horizontal-stretch: root.column-stretches[2];
            height: row-height;
            row-idx: user-idx;
            column-idx: 2;
            Button {
                width: 100%;
                height: 100%;
                icon: Icons.password;
                enabled: enabled;
                clicked => {
                    set-password();
                }
            }
        }
    }
}

component UserTable {
    in property <[string]> names;
    in property <[User]> users;
    in property <[ExtendedStatus]> statuses;
    out property <int> password-popup-user;
    callback set-enabled(user-idx: int, enabled: bool);
    callback set-name(user-idx: int, friendly-name: string);
    callback set-password(user-idx: int, password: string);
    table := Table {
        preferred-width: 100%;
        preferred-height: 100%;
        column-names: TableDesc.column-names;
        column-widths: TableDesc.column-widths;
        column-stretches: TableDesc.column-stretches;
        row-names: names;
        row-heights: [TableDesc.row-height];
        VerticalLayout {
            for row[user-idx] in root.names: UserRow {
                user: users[user-idx];
                status: statuses[user-idx].status;
                column-widths: table.column-widths;
                column-stretches: table.column-stretches;
                user-idx: user-idx;
                row-height: table.row-heights[0];
                changed status => {
                    if self.status == Status.error {
                        ToastMessage.show("Could not modify " + names[user-idx] + ": " + statuses[user-idx].message, PaletteExtra.error-foreground);
                        self.user = users[user-idx];
                    }
                }
                set-enabled(enabled) => {
                    set-enabled(user-idx, enabled);
                }
                set-name(friendly-name) => {
                    set-name(user-idx, friendly-name);
                }
                set-password => {
                    password-popup-user = user-idx;
                    password-popup.show();
                }
            }
        }
    }

    password-popup := PrototypePopup {
        x: (root.width - self.width) / 2;
        y: (root.height - self.height) / 2;
        width: self.min-width;
        height: self.min-height;
        close-policy: no-auto-close;
        VerticalLayout {
            padding: 12px;
            spacing: 8px;
            password-edit := RepeatedPasswordEdit {
                prompt-text: "New " + names[password-popup-user] + " password:";
            }

            HorizontalLayout {
                spacing: 6px;
                Button {
                    text: "Change";
                    primary: true;
                    enabled: password-edit.accepted;
                    clicked => {
                        password-popup.close();
                        set-password(password-popup-user, password-edit.password);
                    }
                }

                Button {
                    text: "Cancel";
                    clicked => {
                        password-popup.close();
                    }
                }
            }

            Text {
                text: password-edit.reason;
                color: PaletteExtra.error-foreground;
            }
        }
    }
}

export component UserEditor inherits ConfigView {
    config-name: "User editor";
    config-icon: Icons.users;
    in property <ExtendedStatus> login-status: UserEditorState.login-statuses[root.device-idx];
    in property <UserList> user-list: UserEditorState.user-lists[root.device-idx];
    in-out property <bool> authenticated: false;
    VerticalLayout {
        if !authenticated: LoginView {
            extended-status: login-status;
            user-name: "Admin1";
            login-button-text: "Edit users";
            back => {
                root.back();
            }
            login(password) => {
                UserEditorState.login(root.device-idx, password);
            }
            success => {
                authenticated = true;
                UserEditorState.list(root.device-idx);
            }
        }
        if authenticated: UserTable {
            names: user-list.names;
            users: user-list.values;
            statuses: user-list.statuses;
            set-enabled(user-idx, enabled) => {
                UserEditorState.set-enabled(root.device-idx, user-idx, enabled);
            }
            set-name(user-idx, friendly-name) => {
                UserEditorState.set-name(root.device-idx, user-idx, friendly-name);
            }
            set-password(user-idx, password) => {
                UserEditorState.set-password(root.device-idx, user-idx, password)
            }
        }
        if authenticated && login-status.status != Status.success: Rectangle {
            height: 0;
            clip: false;
            VerticalLayout {
                y: -self.min-height;
                height: self.min-height;
                spacing: 6px;
                padding: 16px;
                StatusIndicator {
                    preferred-width: 100%;
                    height: 80px;
                    status: login-status.status;
                }

                Text {
                    text: login-status.message;
                    color: PaletteExtra.error-foreground;
                    horizontal-alignment: center;
                }
            }
        }
    }
}

global ExampleUsers {
    out property <UserList> user-list: {
        names: [
            "Admin1",
            "User1",
            "User2",
        ],
        values: [
            {
                name: "Alice",
                enabled: true,
            },
            {
                name: "Bob",
                enabled: false,
            },
            {
                name: "Charlie",
                enabled: false,
            },
        ],
        statuses: [
            { status: Status.success },
            { status: Status.loading },
            { status: Status.error, message: "sample error" },
        ],
    };
}

export component LivePreviewTest_RangeTable inherits UserTable {
    names: ExampleUsers.user-list.names;
    users: ExampleUsers.user-list.values;
    statuses: ExampleUsers.user-list.statuses;
}

export component LivePreviewTest_ListError inherits UserEditor {
    device-name: "Foo Device";
    user-list: ExampleUsers.user-list;
    login-status: { status: Status.error, message: "sample error" };
    authenticated: true;
}

export component LivePreviewTest inherits UserEditor {
    device-name: "Foo Device";
    user-list: ExampleUsers.user-list;
    login-status: { status: Status.loading };
}
