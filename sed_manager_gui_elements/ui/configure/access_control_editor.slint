import { ExtendedStatus, Status } from "../data/status.slint";
import { ConfigView } from "config_view.slint";
import { LoginView } from "login_view.slint";
import { Table, Cell } from "../widgets/table.slint";
import { LineEdit, CheckBox, Button, ComboBox, Switch } from "std-widgets.slint";
import { Icons } from "../icons.slint";
import { PaletteExtra, Island } from "../widgets/visual.slint";
import { ToastMessage } from "../widgets/toast_message.slint";
import { PrototypePopup } from "../widgets/prototype_popup.slint";
import { RepeatedPasswordEdit } from "../widgets/password.slint";
import { AccessControlEditorState, AccessControlMatrix, AccessControlUser } from "../state.slint";
import { StatusIndicator } from "../widgets/progress.slint";
import { RangeAccess } from "../data/range_access.slint";

global RangeTableDesc {
    out property <[string]> column-names: ["Read unlock", "Write unlock"];
    out property <[length]> column-widths: [80px, 80px];
    out property <[float]> column-stretches: [0.2, 0.2];
    out property <length> row-height: 28px;
}

component RangeAccessRow {
    in property <[length]> column-widths: RangeTableDesc.column-widths;
    in property <[float]> column-stretches: RangeTableDesc.column-stretches;
    in property <length> row-height: RangeTableDesc.row-height;
    in property <int> range-idx;
    in property <RangeAccess> access;
    in property <Status> status;
    private property <bool> enabled: status != Status.loading;
    callback set-read-unlock(allowed: bool);
    callback set-write-unlock(allowed: bool);
    changed access => {
        read-unlock.checked = access.read-unlock;
        write-unlock.checked = access.write-unlock;
    }
    changed status => {
        if status == Status.error {
            read-unlock.checked = access.read-unlock;
            write-unlock.checked = access.write-unlock;
        }
    }
    HorizontalLayout {
        Cell {
            min-width: root.column-widths[0];
            horizontal-stretch: root.column-stretches[0];
            height: row-height;
            row-idx: range-idx;
            column-idx: 0;
            read-unlock := CheckBox {
                checked: access.read-unlock;
                enabled: enabled;
                toggled => {
                    set-read-unlock(self.checked);
                }
            }
        }

        Cell {
            min-width: root.column-widths[1];
            horizontal-stretch: root.column-stretches[1];
            height: row-height;
            row-idx: range-idx;
            column-idx: 1;
            write-unlock := CheckBox {
                checked: access.write-unlock;
                enabled: enabled;
                toggled => {
                    set-write-unlock(self.checked)
                }
            }
        }
    }
}

component RangeAccessTable {
    in property <[string]> names;
    in property <[RangeAccess]> accesses;
    in property <[ExtendedStatus]> statuses;
    table := Table {
        preferred-width: 100%;
        preferred-height: 100%;
        column-names: RangeTableDesc.column-names;
        column-widths: RangeTableDesc.column-widths;
        column-stretches: RangeTableDesc.column-stretches;
        row-names: names;
        row-heights: [RangeTableDesc.row-height];
        VerticalLayout {
            for row[range-idx] in root.names: RangeAccessRow {
                access: accesses[range-idx];
                status: statuses[range-idx].status;
                column-widths: table.column-widths;
                column-stretches: table.column-stretches;
                range-idx: range-idx;
                row-height: table.row-heights[0];
                changed status => {
                    if self.status == Status.error {
                        ToastMessage.show("Could not modify " + names[range-idx] + ": " + statuses[range-idx].message, PaletteExtra.error-foreground);
                    }
                }
            }
        }
    }
}

export component AccessControlEditor inherits ConfigView {
    config-name: "Access control";
    config-icon: Icons.permissions;
    in property <ExtendedStatus> login-status: AccessControlEditorState.login-statuses[root.device-idx];
    in property <AccessControlMatrix> matrix: AccessControlEditorState.matrices[root.device-idx];
    in-out property <bool> authenticated: false;
    VerticalLayout {
        if !authenticated: LoginView {
            extended-status: login-status;
            user-name: "Admin1";
            login-button-text: "Edit users";
            back => {
                root.back();
            }
            login(password) => {
                AccessControlEditorState.login(root.device-idx, password);
            }
            success => {
                authenticated = true;
                AccessControlEditorState.list(root.device-idx);
            }
        }
        if authenticated: VerticalLayout {
            spacing: 16px;
            HorizontalLayout {
                alignment: start;
                user-selector := ComboBox {
                    model: matrix.user-names;
                    preferred-width: Math.max(self.min-width, 240px);
                }
            }

            HorizontalLayout {
                alignment: stretch;
                Island {
                    horizontal-stretch: 0;
                    background: PaletteExtra.accented-control-background;
                    border-top-right-radius: 0px;
                    border-bottom-right-radius: 0px;
                    HorizontalLayout {
                        padding: 8px;
                        Text {
                            text: "Shadow MBR";
                            vertical-alignment: center;
                        }
                    }
                }

                Island {
                    horizontal-stretch: 1;
                    background: #00000000;
                    border-color: PaletteExtra.accented-control-background;
                    border-top-left-radius: 0px;
                    border-bottom-left-radius: 0px;
                    border-width: 2px;
                    HorizontalLayout {
                        padding: 8px;
                        padding-left: 16px;
                        CheckBox {
                            text: "Unshadow";
                            checked: matrix.user-accesses[user-selector.current-index].unshadow-mbr;
                        }
                    }
                }
            }

            RangeAccessTable {
                names: matrix.user-accesses[user-selector.current-index].range-names;
                accesses: matrix.user-accesses[user-selector.current-index].range-accesses;
                statuses: matrix.user-accesses[user-selector.current-index].range-statuses;
            }

            if login-status.status != Status.success: Rectangle {
                height: 0;
                clip: false;
                VerticalLayout {
                    y: -self.min-height;
                    height: self.min-height;
                    spacing: 6px;
                    padding: 16px;
                    StatusIndicator {
                        preferred-width: 100%;
                        height: 80px;
                        status: login-status.status;
                    }

                    Text {
                        text: login-status.message;
                        color: PaletteExtra.error-foreground;
                        horizontal-alignment: center;
                    }
                }
            }
        }
    }
}

global ExampleMatrix {
    out property <AccessControlMatrix> matrix: {
        user-names: ["User1", "User2"],
        user-accesses: [
            {
                unshadow-mbr: false,
                range-names: ["GlobalRange", "Range1", "Range2"],
                range-accesses: [
                    { read-unlock: false, write-unlock: false },
                    { read-unlock: false, write-unlock: false },
                    { read-unlock: false, write-unlock: false },
                ],
                range-statuses: [
                    { status: Status.success },
                    { status: Status.loading },
                    { status: Status.error },
                ],
            },
            {
                unshadow-mbr: true,
                range-names: ["GlobalRange", "Range1", "Range2"],
                range-accesses: [
                    { read-unlock: true, write-unlock: false },
                    { read-unlock: true, write-unlock: false },
                    { read-unlock: true, write-unlock: false },
                ],
                range-statuses: [
                    { status: Status.success },
                    { status: Status.error },
                    { status: Status.loading },
                ],
            }
        ],
    };
}

export component LivePreviewTest_RangeTable inherits RangeAccessTable { }

export component LivePreviewTest_ListError inherits AccessControlEditor {
    device-name: "Foo Device";
    login-status: { status: Status.error, message: "sample error" };
    authenticated: true;
    matrix: ExampleMatrix.matrix;
}

export component LivePreviewTest_Auth inherits AccessControlEditor {
    device-name: "Foo Device";
    login-status: { status: Status.success };
    authenticated: true;
    matrix: ExampleMatrix.matrix;
}

export component LivePreviewTest inherits AccessControlEditor {
    device-name: "Foo Device";
    login-status: { status: Status.loading };
    matrix: ExampleMatrix.matrix;
}
