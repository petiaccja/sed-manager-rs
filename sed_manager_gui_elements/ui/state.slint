import { ExtendedStatus, Status } from "data/status.slint";
import { LockingRange } from "data/locking_range.slint";
import { User } from "data/user.slint";
import { RangeAccess } from "data/range_access.slint";
import { DeviceDescription } from "data/device_description.slint";
import { UnavailableDevice } from "data/unavailable_device.slint";
import { MBRControl } from "data/mbr_control.slint";

export struct RangeList {
    names: [string],
    values: [LockingRange],
    statuses: [ExtendedStatus],
}

export struct UserList {
    names: [string],
    values: [User],
    statuses: [ExtendedStatus],
}


export struct AccessControlUser {
    unshadow-mbr: bool,
    range-names: [string],
    range-accesses: [RangeAccess],
    range-statuses: [ExtendedStatus],

}

export struct AccessControlMatrix {
    user-names: [string],
    user-accesses: [AccessControlUser],
}

export struct ComIdState {
    com-id: int,
    com-id-ext: int,
    state: string,
}

export global SingleStepState {
    in property <[ExtendedStatus]> statuses;
    callback take-ownership(device-idx: int, new-password: string);
    callback activate-locking(device-idx: int, sid-password: string, new-locking-password: string);
    callback revert(device-idx: int, use-psid: bool, password: string, revert-admin: bool);
}

export global RangeEditorState {
    in property <[ExtendedStatus]> login-statuses;
    in property <[RangeList]> range-lists;
    callback login(device-idx: int, password: string);
    callback list(device-idx: int);
    callback set-value(device-idx: int, range-idx: int, value: LockingRange);
    callback erase(device-idx: int, range-idx: int);
}

export global UserEditorState {
    in property <[ExtendedStatus]> login-statuses;
    in property <[UserList]> user-lists;
    callback login(device-idx: int, password: string);
    callback list(device-idx: int);
    callback set-enabled(device-idx: int, user-idx: int, enabled: bool);
    callback set-name(device-idx: int, user-idx: int, name: string);
    callback set-password(device-idx: int, user-idx: int, password: string);
}

export global AccessControlEditorState {
    in property <[ExtendedStatus]> login-statuses;
    in property <[AccessControlMatrix]> matrices;
    callback login(device-idx: int, password: string);
    callback list(device-idx: int);
}

export global MBREditorState {
    in property <[ExtendedStatus]> login-statuses;
    in property <[MBRControl]> mbr-control;
    callback login(device-idx: int, password: string);
    callback query(device-idx: int);
}

export global TroubleshootingState {
    in property <[ExtendedStatus]> statuses;
    in property <[ComIdState]> com-id-states;
    callback com-id-state(device-idx: int);
    callback stack-reset(device-idx: int);
}

export global DeviceListState {
    in property <ExtendedStatus> extended-status: { status: Status.loading };
    in property <[string]> tab-names;
    in property <[UnavailableDevice]> unavailable-devices;
    in property <[DeviceDescription]> descriptions;
    callback list();
    callback discover(device-idx: int);
    callback release-session(device-idx: int);
}
