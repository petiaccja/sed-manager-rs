import { DeviceDescription, ExampleData as DeviceDescriptionExampleData } from "data/device_description.slint";
import { UnavailableDevicesPage} from "pages/unavailable_devices_page.slint";
import { TabBar } from "widgets/tab_bar.slint";
import { AlternativeLayout, AlternativeChild } from "widgets/alternative_layout.slint";
import { State } from "state.slint";
import { Button, Spinner } from "std-widgets.slint";
import { DevicePage } from "pages/device_page.slint";
import { UnavailableDevicesPage } from "pages/unavailable_devices_page.slint";

export { State }

export component AppWindow inherits Window {
    title: "SED Manager";
    icon: @image-url("../images/temporary_logo.png");
    preferred-width: 960px;
    preferred-height: 600px;
    min-width: 640px;
    min-height: 360px;
    private property <int> current-tab;
    VerticalLayout {
        if State.tab-names.length != 0: VerticalLayout {
            alignment: stretch;
            padding-left: 16px;
            padding-right: 16px;
            padding-bottom: 16px;
            padding-top: 6px;
            HorizontalLayout {
                vertical-stretch: 0.0;
                TabBar {
                    titles: State.tab-names;
                    selected: Math.max(0, Math.min(State.tab-names.length - 1, current-tab));
                    tab-selected(index) => {
                        current-tab = index;
                    }
                }

                Button {
                    height: 32px;
                    icon: @image-url("../images/action/8666728_refresh_cw_icon.svg");
                    colorize-icon: true;
                    clicked => {
                        State.list-devices();
                    }
                }
            }

            AlternativeLayout {
                vertical-stretch: 1.0;
                for device-idx in State.descriptions.length: AlternativeChild {
                    selected: current-tab == device-idx;
                    device-page := DevicePage {
                        device-idx: device-idx;
                    }

                    changed selected => {
                        if self.selected {
                            device-page.gained-focus();
                        }
                    }
                }
                AlternativeChild {
                    selected: current-tab >= State.descriptions.length;
                    UnavailableDevicesPage {
                        unavailable-devices: State.unavailable-devices;
                    }
                }
            }
        }
        if State.tab-names.length == 0: HorizontalLayout {
            alignment: space-around;
            VerticalLayout {
                Rectangle {
                    preferred-height: 100%;
                }

                HorizontalLayout {
                    alignment: space-around;
                    Spinner {
                        width: 80px;
                        height: 80px;
                        indeterminate: true;
                    }
                }

                Text {
                    text: "Loading devices...";
                    font-size: 24px;
                    horizontal-alignment: center;
                }

                Text {
                    text: "This might take 10-20 seconds if drives need to spin up.";
                    horizontal-alignment: center;
                }

                Rectangle {
                    preferred-height: 100%;
                }
            }
        }
    }
}

export component LivePreviewTest_Loading inherits AppWindow { }
