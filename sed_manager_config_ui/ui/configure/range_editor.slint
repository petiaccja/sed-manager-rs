//L-----------------------------------------------------------------------------
//L Copyright (C) PÃ©ter Kardos
//L Please refer to the full license distributed with this software.
//L-----------------------------------------------------------------------------

import { ConfigView } from "config_view.slint";
import { LineEdit, Button, CheckBox, ScrollView, Palette } from "std-widgets.slint";
import { ExtendedStatus, Status } from "../data/status.slint";
import { LockingRange } from "../data/locking_range.slint";
import { DeviceGeometry } from "../data/device_description.slint";
import { PaletteExtra, VerticalSeparator, Island } from "../widgets/visual.slint";
import { NavigationButton, NavigationDirection } from "../widgets/navigation_button.slint";
import { ResultPopup } from "../widgets/result_popup.slint";
import { Table, Cell } from "../widgets/table.slint";
import { Types } from "../data/types.slint";
import { WarningPopup } from "../widgets/warning_popup.slint";
import { StatusIndicator } from "../widgets/progress.slint";
import { ToastMessage } from "../widgets/toast_message.slint";
import { StatusOverlay } from "../widgets/status-overlay.slint";
import { Icons } from "../icons.slint";
import { LoginView } from "login_view.slint";
import { RangeEditorState, RangeList, DeviceListState } from "../state.slint";

global TableDesc {
    out property <[string]> column-names: [
        "Start\n(LBA)",
        "Length\n(LBA)",
        "End\n(LBA)",
        "Read lock\n enabled",
        "Write lock\n enabled",
        "Read locked",
        "Write locked",
        "Erase",
    ];
    out property <[length]> column-widths: [100px, 100px, 100px, 80px, 80px, 80px, 80px, 60px];
    out property <[float]> column-stretches: [1, 1, 1, 0.3, 0.3, 0.3, 0.3, 0.2];
    out property <length> row-height: 32px;
}

component EraseWarningMessage {
    in property <string> range-name;
    VerticalLayout {
        alignment: center;
        spacing: 8px;
        Text {
            text: "Erase " + range-name + "?";
            font-weight: 600;
        }

        Text {
            text: "The data is erased cryptographically, and there is no way to recover it.";
        }
    }
}

component CheckedRangeValue {
    in property <DeviceGeometry> geometry;
    in-out property <int> start-lba;
    in-out property <int> length-lba;
    in-out property <int> end-lba;
    in-out property <bool> read-lock-enabled;
    in-out property <bool> write-lock-enabled;
    in-out property <bool> read-locked;
    in-out property <bool> write-locked;
    callback udpated();
    pure function align(value: int) -> int {
        geometry.lowest-aligned-block + Math.floor(Math.max(0, value - geometry.lowest-aligned-block) / geometry.block-alignment) * geometry.block-alignment
    }
    public function set-start(new-start: int) {
        start-lba = align(Math.max(0, new-start));
        end-lba = Math.max(start-lba, end-lba);
        length-lba = end-lba - start-lba;
        udpated();
    }
    public function set-end(new-end: int) {
        end-lba = align(Math.max(0, new-end));
        start-lba = Math.min(start-lba, end-lba);
        length-lba = end-lba - start-lba;
        udpated();
    }
    public function set-length(new-length: int) {
        end-lba = align(start-lba + Math.max(0, new-length));
        length-lba = end-lba - start-lba;
        udpated();
    }
    public function set-range(properties: LockingRange) {
        start-lba = properties.start-lba;
        length-lba = properties.end-lba - properties.start-lba;
        end-lba = properties.end-lba;
        read-lock-enabled = properties.read-lock-enabled;
        write-lock-enabled = properties.write-lock-enabled;
        read-locked = properties.read-locked;
        write-locked = properties.write-locked;
    }
    public function get-range() -> LockingRange {
        {
            start-lba: start-lba,
            end-lba: end-lba,
            read-lock-enabled: read-lock-enabled,
            write-lock-enabled: write-lock-enabled,
            read-locked: read-locked,
            write-locked: write-locked,
        }
    }
}

component RangeRow {
    in property <DeviceGeometry> geometry;
    in property <[length]> column-widths: TableDesc.column-widths;
    in property <[float]> column-stretches: TableDesc.column-stretches;
    in property <length> row-height: TableDesc.row-height;
    in property <int> range-idx;
    in property <LockingRange> range;
    in property <Status> status;
    private property <bool> enabled: status != Status.loading;
    callback set-value(value: LockingRange);
    callback erase();
    changed range => {
        checked-range.set-range(range);
    }
    changed status => {
        if status == Status.error {
            checked-range.set-range(range);
            start-lba.text = checked-range.start-lba;
            length-lba.text = checked-range.length-lba;
            end-lba.text = checked-range.end-lba;
        }
    }
    HorizontalLayout {
        Cell {
            min-width: root.column-widths[0];
            horizontal-stretch: root.column-stretches[0];
            height: row-height;
            row-idx: range-idx;
            column-idx: 0;
            start-lba := LineEdit {
                width: parent.width;
                input-type: number;
                horizontal-alignment: right;
                text: checked-range.start-lba;
                enabled: enabled;
                accepted(text) => {
                    self.clear-focus();
                    checked-range.set-start(Types.str-to-int(text));
                    set-value(checked-range.get-range());
                }
            }
        }

        Cell {
            min-width: root.column-widths[1];
            horizontal-stretch: root.column-stretches[1];
            height: row-height;
            row-idx: range-idx;
            column-idx: 1;
            length-lba := LineEdit {
                width: parent.width;
                input-type: number;
                horizontal-alignment: right;
                text: checked-range.length-lba;
                enabled: enabled;
                accepted(text) => {
                    self.clear-focus();
                    checked-range.set-length(Types.str-to-int(text));
                    set-value(checked-range.get-range());
                }
            }
        }

        Cell {
            min-width: root.column-widths[2];
            horizontal-stretch: root.column-stretches[2];
            height: row-height;
            row-idx: range-idx;
            column-idx: 2;
            end-lba := LineEdit {
                width: parent.width;
                input-type: number;
                horizontal-alignment: right;
                text: checked-range.end-lba;
                enabled: enabled;
                accepted(text) => {
                    self.clear-focus();
                    checked-range.set-end(Types.str-to-int(text));
                    set-value(checked-range.get-range());
                }
            }
        }

        Cell {
            min-width: root.column-widths[3];
            horizontal-stretch: root.column-stretches[3];
            height: row-height;
            row-idx: range-idx;
            column-idx: 3;
            rd-lock-en := CheckBox {
                checked <=> checked-range.read-lock-enabled;
                enabled: enabled;
                toggled => {
                    set-value(checked-range.get-range());
                }
            }
        }

        Cell {
            min-width: root.column-widths[4];
            horizontal-stretch: root.column-stretches[4];
            height: row-height;
            row-idx: range-idx;
            column-idx: 4;
            wr-lock-en := CheckBox {
                checked <=> checked-range.write-lock-enabled;
                enabled: enabled;
                toggled => {
                    set-value(checked-range.get-range());
                }
            }
        }

        Cell {
            min-width: root.column-widths[5];
            horizontal-stretch: root.column-stretches[5];
            height: row-height;
            row-idx: range-idx;
            column-idx: 5;
            rd-locked := CheckBox {
                checked <=> checked-range.read-locked;
                enabled: enabled;
                toggled => {
                    set-value(checked-range.get-range());
                }
            }
        }

        Cell {
            min-width: root.column-widths[6];
            horizontal-stretch: root.column-stretches[6];
            height: row-height;
            row-idx: range-idx;
            column-idx: 6;
            wr-locked := CheckBox {
                checked <=> checked-range.write-locked;
                enabled: enabled;
                toggled => {
                    set-value(checked-range.get-range());
                }
            }
        }

        Cell {
            min-width: root.column-widths[7];
            horizontal-stretch: root.column-stretches[7];
            height: row-height;
            row-idx: range-idx;
            column-idx: 7;
            Button {
                height: 100%;
                width: 100%;
                icon: Icons.delete-forever;
                enabled: enabled;
                clicked => {
                    erase();
                }
            }
        }

        checked-range := CheckedRangeValue {
            width: 0px;
            geometry: geometry;
            start-lba: range.start-lba;
            length-lba: range.end-lba - range.start-lba;
            end-lba: range.end-lba;
            read-lock-enabled: range.read-lock-enabled;
            write-lock-enabled: range.write-lock-enabled;
            read-locked: range.read-locked;
            write-locked: range.write-locked;
            udpated => {
                start-lba.text = self.start-lba;
                length-lba.text = self.length-lba;
                end-lba.text = self.end-lba;
            }
        }
    }
}

component RangeTable {
    in property <DeviceGeometry> geometry;
    in property <[string]> names;
    in property <[LockingRange]> ranges;
    in property <[ExtendedStatus]> statuses;
    callback set-value(range-idx: int, value: LockingRange);
    callback erase(range-idx: int);
    private property <int> warned-range-idx;
    erase-warning := WarningPopup {
        x: (root.width - self.width) / 2;
        y: (root.height - self.height) / 2;
        continue-text: "Erase";
        EraseWarningMessage {
            range-name: names[warned-range-idx];
        }

        continued => {
            self.close();
            erase(warned-range-idx);
        }
        cancelled => {
            self.close();
        }
    }

    table := Table {
        preferred-width: 100%;
        preferred-height: 100%;
        column-names: TableDesc.column-names;
        column-widths: TableDesc.column-widths;
        column-stretches: TableDesc.column-stretches;
        row-names: names;
        row-heights: [TableDesc.row-height];
        VerticalLayout {
            for row[range-idx] in root.names: RangeRow {
                geometry: geometry;
                range: ranges[range-idx];
                status: statuses[range-idx].status;
                column-widths: table.column-widths;
                column-stretches: table.column-stretches;
                range-idx: range-idx;
                row-height: table.row-heights[0];
                set-value(value) => {
                    set-value(range-idx, value);
                }
                erase() => {
                    warned-range-idx = range-idx;
                    erase-warning.show();
                }
                changed status => {
                    if self.status == Status.error {
                        ToastMessage.show("Could not modify " + names[range-idx] + ": " + statuses[range-idx].message, PaletteExtra.error-foreground);
                        self.range = ranges[range-idx];
                    }
                }
            }
        }
    }
}

export component RangeEditor inherits ConfigView {
    config-name: "Range editor";
    config-icon: Icons.locking-ranges;
    in property <ExtendedStatus> login-status: RangeEditorState.login-statuses[root.device-idx];
    in property <DeviceGeometry> geometry: DeviceListState.descriptions[root.device-idx].geometry;
    in property <RangeList> range-list: RangeEditorState.range-lists[root.device-idx];
    private property <bool> authenticated: false;
    form := VerticalLayout {
        if !authenticated: LoginView {
            extended-status: login-status;
            user-name: "Admin1";
            login-button-text: "Edit locking ranges";
            back => {
                root.back();
            }
            login(password) => {
                RangeEditorState.login(root.device-idx, password);
            }
            success => {
                authenticated = true;
                RangeEditorState.list(root.device-idx);
            }
        }
        if authenticated: RangeTable {
            geometry: geometry;
            names: range-list.names;
            ranges: range-list.values;
            statuses: range-list.statuses;
            set-value(range-idx, value) => {
                RangeEditorState.set-value(root.device-idx, range-idx, value);
            }
            erase(range-idx) => {
                RangeEditorState.erase(root.device-idx, range-idx);
            }
        }
        if login-status.status != Status.success && authenticated: StatusOverlay {
            status: login-status;
        }
    }
}

global ExampleRanges {
    out property <DeviceGeometry> geometry: { block-alignment: 8, lowest-aligned-block: 0, block-size: 512 };
    out property <RangeList> range_list: {
        names: [
            "GlobalRange",
            "Range1",
            "Range2",
        ],
        values: [
            {
                start-lba: 0,
                end-lba: 0,
                read-lock-enabled: false,
                write-lock-enabled: false,
                read-locked: false,
                write-locked: false,
            },
            {
                start-lba: 1000,
                end-lba: 2000,
                read-lock-enabled: true,
                write-lock-enabled: true,
                read-locked: false,
                write-locked: false,
            },
            {
                start-lba: 0,
                end-lba: 0,
                read-lock-enabled: false,
                write-lock-enabled: false,
                read-locked: false,
                write-locked: false,
            },
        ],
        statuses: [
            { status: Status.success },
            { status: Status.loading },
            { status: Status.error, message: "sample error" },
        ],
    };
}

export component LivePreviewTest_RangeTable inherits RangeTable {
    geometry: ExampleRanges.geometry;
    names: ExampleRanges.range_list.names;
    ranges: ExampleRanges.range_list.values;
    statuses: ExampleRanges.range_list.statuses;
}

export component LivePreviewTest inherits RangeEditor {
    device-name: "Foo Device";
    geometry: ExampleRanges.geometry;
    range-list: ExampleRanges.range_list;
    login-status: { status: Status.success };
    timer := Timer {
        interval: 1s;
        running: false;
        triggered => {
            self.running = false;
            root.login-status.status = Status.success;
        }
    }
}
