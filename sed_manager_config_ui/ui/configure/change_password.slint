//L-----------------------------------------------------------------------------
//L Copyright (C) PÃ©ter Kardos
//L Please refer to the full license distributed with this software.
//L-----------------------------------------------------------------------------

import { LineEdit, Button, Switch, ComboBox } from "std-widgets.slint";
import { PaletteExtra } from "../widgets/visual.slint";
import { Status, ExtendedStatus} from "../data/status.slint";
import { ResultPopup } from "../widgets/result_popup.slint";
import { ConfigView } from "config_view.slint";
import { RepeatedPasswordEdit } from "../widgets/password.slint";
import { Icons, IconColors } from "../icons.slint";
import { ChangePasswordState } from "../state.slint";
import { StatusIndicator } from "../widgets/progress.slint";

component Form {
    in property <[string]> users;
    in property <bool> enabled;
    out property <int> user-idx;
    out property <string> current-password;
    out property <string> new-password: new-password.password;
    callback executed();
    VerticalLayout {
        alignment: LayoutAlignment.center;
        padding: 8px;
        spacing: 6px;
        min-width: 200px;
        ComboBox {
            model: users;
            current-index <=> user-idx;
        }

        Text {
            text: "Current password:";
        }

        owner-password := LineEdit {
            input-type: InputType.password;
            text <=> current-password;
        }

        Rectangle {
            height: 12px;
        }

        new-password := RepeatedPasswordEdit {
            prompt-text: "New password:";
        }

        Rectangle {
            height: 12px;
        }

        Button {
            text: "Change password";
            primary: true;
            clicked => {
                executed();
            }
        }

        Text {
            text: new-password.reason;
            color: PaletteExtra.error-foreground;
            horizontal-alignment: center;
        }
    }
}

enum Stage {
    loading-users,
    changing-passwords,
}

export component ChangePassword inherits ConfigView {
    in property <ExtendedStatus> extended-status: ChangePasswordState.statuses[root.device-idx];
    in property <[string]> users: ChangePasswordState.users[root.device-idx];
    private property <Stage> stage: Stage.loading-users;
    config-name: "Change password";
    config-icon: Icons.change-password;
    config-color: IconColors.change-password;
    back-enabled: extended-status.status != Status.loading;
    changed extended-status => {
        if stage == Stage.loading-users && extended-status.status == Status.success {
            stage = Stage.changing-passwords;
        }
    }
    result-popup := ResultPopup {
        x: (root.width - self.width) / 2;
        y: (root.height - self.height) / 2;
        icon: root.config-icon;
        finish-enabled: root.back-enabled;
        retry-enabled: root.back-enabled;
        status: extended-status.status;
        finish-text: "Done";
        message: {
            if extended-status.status == Status.success {
                "Password changed"
            } else if extended-status.status == Status.error {
                "Failed to change password:\n" + extended-status.message
            } else {
                "Changing password..."
            }
        }
        finished => {
            self.close();
            root.back();
        }
        retried => {
            self.close();
        }
    }

    HorizontalLayout {
        alignment: center;
        vertical-stretch: 1.0;
        if stage == Stage.loading-users: VerticalLayout {
            alignment: center;
            spacing: 8px;
            StatusIndicator {
                height: 80px;
                status: root.extended-status.status;
            }

            Text {
                text: {
                    if root.extended-status.status == Status.success {
                        "Users loaded"
                    } else if root.extended-status.status == Status.error {
                        "Failed to load users:\n" + root.extended-status.message
                    } else {
                        "Loading users..."
                    }
                }
            }
        }
        if stage == Stage.changing-passwords: Form {
            users: root.users;
            enabled: root.back-enabled;
            executed => {
                ChangePasswordState.change-password(root.device-idx, self.user-idx, self.current-password, self.new-password);
                result-popup.show();
            }
        }
    }
}
