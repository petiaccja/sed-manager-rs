import { ExtendedStatus, Status } from "../data/status.slint";
import { ConfigView } from "config_view.slint";
import { LoginView } from "login_view.slint";
import { MBRControl } from "../data/mbr_control.slint";
import { Table, Cell } from "../widgets/table.slint";
import { LineEdit, CheckBox, Button, Switch, Palette, ProgressIndicator } from "std-widgets.slint";
import { Icons } from "../icons.slint";
import { PaletteExtra, Island, HorizontalSeparator } from "../widgets/visual.slint";
import { ToastMessage } from "../widgets/toast_message.slint";
import { StatusOverlay } from "../widgets/status-overlay.slint";
import { PrototypePopup } from "../widgets/prototype_popup.slint";
import { RepeatedPasswordEdit } from "../widgets/password.slint";
import { MBREditorState } from "../state.slint";
import { StatusIndicator } from "../widgets/progress.slint";
import { IconButton } from "../widgets/icon_button.slint";

component MBRView {
    in property <MBRControl> mbr-control;
    in property <Status> control-status;
    in property <Status> upload-status;
    in property <float> upload-progress;
    callback set-enabled(enabled: bool);
    callback set-done(done: bool);
    callback upload();
    callback cancel();
    changed control-status => {
        if control-status == Status.error {
            enabled-switch.checked = mbr-control.enabled;
            done-switch.checked = !mbr-control.done;
        }
    }
    VerticalLayout {
        spacing: 12px;
        Island {
            HorizontalLayout {
                alignment: start;
                vertical-stretch: 0;
                GridLayout {
                    padding: 8px;
                    spacing-vertical: 12px;
                    spacing-horizontal: 16px;
                    Text {
                        row: 0;
                        text: "Size:";
                        vertical-alignment: center;
                    }

                    Text {
                        text: mbr-control.size + " B";
                        vertical-alignment: center;
                    }

                    Text {
                        row: 1;
                        text: "Shadowing:";
                        vertical-alignment: center;
                    }

                    enabled-switch := Switch {
                        text: self.checked ? "Enabled" : "Disabled";
                        checked: mbr-control.enabled;
                        enabled: control-status != Status.loading;
                        toggled => {
                            set-enabled(self.checked);
                        }
                    }

                    Text {
                        row: 2;
                        text: "Current state:";
                        vertical-alignment: center;
                    }

                    done-switch := Switch {
                        text: self.checked ? "Shadowed" : "Not shadowed";
                        checked: !mbr-control.done;
                        enabled: control-status != Status.loading;
                        toggled => {
                            set-done(!self.checked);
                        }
                    }
                }
            }
        }

        VerticalLayout {
            vertical-stretch: 1;
            alignment: center;
            HorizontalLayout {
                alignment: center;
                IconButton {
                    icon: Icons.upload;
                    width: 120px;
                    height: 120px;
                    enabled: upload-status != Status.loading;
                    clicked => {
                        upload();
                    }
                }
            }
        }

        HorizontalLayout {
            spacing: 8px;
            ProgressIndicator {
                indeterminate: false;
                progress: upload-progress;
            }

            Button {
                text: "Cancel";
                enabled: upload-status == Status.loading;
                clicked => {
                    cancel();
                }
            }
        }
    }
}

export component MBREditor inherits ConfigView {
    config-name: "Shadow MBR";
    config-icon: Icons.mbr-shadowing;
    back-enabled: login-status.status != Status.loading && upload-status.status != Status.loading;
    in property <ExtendedStatus> login-status: MBREditorState.login-statuses[root.device-idx];
    in property <ExtendedStatus> control-status: MBREditorState.control-statuses[root.device-idx];
    in property <ExtendedStatus> upload-status: MBREditorState.upload-statuses[root.device-idx];
    in property <float> upload-progress: MBREditorState.upload-progresses[root.device-idx];
    in property <MBRControl> mbr-control: MBREditorState.mbr-control[root.device-idx];
    in-out property <bool> authenticated: false;
    changed control-status => {
        if control-status.status == Status.error {
            ToastMessage.show("Failed to update MBR: " + control-status.message, PaletteExtra.error-foreground);
        }
    }
    changed upload-status => {
        if upload-status.status == Status.error {
            ToastMessage.show("Upload failed: " + upload-status.message, PaletteExtra.error-foreground);
        } else if upload-status.status == Status.success {
            ToastMessage.show("Upload finished", PaletteExtra.success-foreground);
        }
    }
    VerticalLayout {
        if !authenticated: LoginView {
            extended-status: login-status;
            user-name: "Admin1";
            login-button-text: "Edit shadow MBR";
            back => {
                root.back();
            }
            login(password) => {
                MBREditorState.login(root.device-idx, password);
            }
            success => {
                authenticated = true;
                MBREditorState.query(root.device-idx);
            }
        }
        if authenticated: MBRView {
            mbr-control: mbr-control;
            control-status: control-status.status;
            upload-status: upload-status.status;
            upload-progress: upload-progress;
            set-enabled(enabled) => {
                MBREditorState.set-enabled(root.device-idx, enabled);
            }
            set-done(done) => {
                MBREditorState.set-done(root.device-idx, done);
            }
            upload => {
                MBREditorState.upload-cancel_reqs[root.device-idx] = false;
                MBREditorState.upload(root.device-idx)
            }
            cancel => {
                MBREditorState.upload-cancel_reqs[root.device-idx] = true;
            }
        }
        if login-status.status != Status.success && authenticated: StatusOverlay {
            status: login-status;
        }
    }
}

global ExampleData { }

export component LivePreviewTest_ParamsError inherits MBREditor {
    device-name: "Foo Device";
    login-status: { status: Status.error, message: "sample error" };
    authenticated: true;
}

export component LivePreviewTest_ParamsSuccess inherits MBREditor {
    device-name: "Foo Device";
    login-status: { status: Status.success };
    authenticated: true;
}

export component LivePreviewTest inherits MBREditor {
    device-name: "Foo Device";
    login-status: { status: Status.loading };
}
