//L-----------------------------------------------------------------------------
//L Copyright (C) PÃ©ter Kardos
//L Please refer to the full license distributed with this software.
//L-----------------------------------------------------------------------------

import { VerticalSeparator, HorizontalSeparator, PaletteExtra } from "visual.slint";
import { ScrollView, Palette } from "std-widgets.slint";

global Background {
    out property <color> header-border: Palette.background.mix(PaletteExtra.accented-control-background, 0.5);
    out property <color> cell-border: PaletteExtra.accented-control-background;
    public pure function background(row-idx: int, column-idx: int, header: bool) -> color {
        PaletteExtra.accented-control-background.with-alpha(PaletteExtra.accented-control-background.alpha * opacity(row-idx, column-idx, header) / 255)
    }
    pure function opacity(row-idx: int, column-idx: int, header: bool) -> float {
        if header {
            1.0
        } else {
            0.2 - (Math.mod(row-idx, 2) == 0 ? 0.2 : 0.0)
        }
    }
}

export component Cell {
    in property <int> row-idx;
    in property <int> column-idx;
    @children
    Rectangle {
        border-width: 1px;
        border-color: Background.cell-border;
        background: Background.background(row-idx, column-idx, false);
    }
}

export component Table {
    in property <[string]> column-names;
    in property <[string]> row-names;
    in property <[length]> column-widths;
    in property <[float]> column-stretches;
    in property <[length]> row-heights;
    GridLayout {
        Rectangle {
            row: 0;
            col: 0;
            background: Background.background(0, 0, true);
            border-top-left-radius: 8px;
            min-width: 16px;
        }

        Rectangle {
            row: 0;
            col: 1;
            clip: true;
            height: column-name-layout.min-height;
            column-name-layout := HorizontalLayout {
                x: content.viewport-x;
                for name[i] in column-names: Rectangle {
                    min-width: column-widths[i];
                    horizontal-stretch: column-stretches[i];
                    background: Background.background(0, i, true);
                    border-top-right-radius: i + 1 == column-names.length ? 8px : 0px;
                    HorizontalLayout {
                        padding: 4px;
                        Text {
                            text: name;
                            horizontal-alignment: center;
                            vertical-alignment: center;
                        }
                    }
                }
            }
        }

        Rectangle {
            row: 1;
            col: 0;
            clip: true;
            width: row-name-layout.min-width;
            row-name-layout := VerticalLayout {
                y: content.viewport-y;
                for name[i] in row-names: Rectangle {
                    height: i < row-heights.length ? row-heights[i] : row-heights[0];
                    background: Background.background(i, 0, true);
                    border-bottom-left-radius: i + 1 == row-names.length ? 8px : 0px;
                    VerticalLayout {
                        padding: 4px;
                        Text {
                            text: name;
                            horizontal-alignment: center;
                            vertical-alignment: center;
                        }
                    }
                }
            }
        }

        content := ScrollView {
            viewport-width: Math.max(column-name-layout.width, column-name-layout.min-width);
            viewport-height: row-name-layout.min-height;
            preferred-width: 100%;
            @children
        }
    }
}

export component LivePreviewTest inherits Table {
    column-names: ["A", "B", "C", "D", "E"];
    row-names: ["1", "2", "3", "4", "5", "6"];
    column-widths: [200px, 100px, 100px, 100px, 100px];
    column-stretches: [2.0, 0.5, 0.5, 0.5, 0.5];
    row-heights: [32px, 32px, 32px, 32px, 32px, 32px];
    VerticalLayout {
        for row[row-idx] in root.row-names: HorizontalLayout {
            preferred-width: 100%;
            for column[column-idx] in root.column-names: Cell {
                min-width: root.column-widths[column-idx];
                horizontal-stretch: root.column-stretches[column-idx];
                height: root.row-heights[row-idx];
                row-idx: row-idx;
                column-idx: column-idx;
                Text {
                    text: column + row;
                    horizontal-alignment: center;
                    vertical-alignment: center;
                }
            }
        }
    }
}
