import { ScrollView, GridBox, HorizontalBox, Palette } from "std-widgets.slint";
import { VerticalSeparator, PaletteExtra, HorizontalSeparator } from "../../widgets/visual.slint";
import { CollapsibleView } from "../../widgets/collapsible_view.slint";
import { NameValueListView } from "../../widgets/name_value_list_view.slint";
import { ContentStatus, TextLoadingIndicator } from "../../widgets/loading.slint";
import { DeviceDiscovery, DeviceDiscoveryFeature, ExampleData } from "device_description.slint";

component LoadingView {
    property <length> spacing: 16px;
    HorizontalLayout {
        spacing: 12px;
        VerticalLayout {
            alignment: start;
            CollapsibleView {
                text: "Common features";
                preferred-height: self.min-height;
                font-color: PaletteExtra.accented-control-foreground;
                VerticalLayout {
                    padding: 6px;
                    alignment: start;
                    TextLoadingIndicator {
                        min-width: 100px;
                        height: 16px;
                    }
                }
            }
        }

        VerticalLayout {
            alignment: start;
            CollapsibleView {
                text: "SSC features";
                preferred-height: self.min-height;
                font-color: PaletteExtra.accented-control-foreground;
                VerticalLayout {
                    padding: 6px;
                    alignment: start;
                    TextLoadingIndicator {
                        min-width: 60px;
                        height: 16px;
                    }
                }
            }
        }
    }
}

component ErrorView {
    in property <string> error;
    VerticalLayout {
        alignment: center;
        padding: 12px;
        spacing: 8px;
        Image {
            source: @image-url("../../../images/device/9111167_lock_no_icon.svg");
            preferred-height: 200px;
            min-height: 80px;
            colorize: PaletteExtra.accented-foreground.with-alpha(0.6);
        }

        Text {
            text: "No encryption features found";
            font-size: 14px;
            horizontal-alignment: center;
        }

        Text {
            text: root.error;
            font-size: 14px;
            horizontal-alignment: center;
        }
    }
}

component SplitView {
    in property <[DeviceDiscoveryFeature]> common-features;
    in property <[DeviceDiscoveryFeature]> ssc-features;
    HorizontalLayout {
        alignment: stretch;
        spacing: 12px;
        if root.common-features.length != 0: ScrollView {
            horizontal-scrollbar-policy: always-off;
            min-width: common_feature_view.min-width;
            viewport-height: common_feature_view.min-height;
            common_feature_view := VerticalLayout {
                spacing: 12px;
                for feature in root.common-features: CollapsibleView {
                    text: feature.name;
                    font-color: PaletteExtra.accented-control-foreground;
                    VerticalLayout {
                        alignment: start;
                        HorizontalSeparator {
                            background: Palette.background;
                        }

                        NameValueListView {
                            name_value_pairs: feature.properties;
                        }
                    }
                }
            }
        }
        if root.ssc-features.length != 0: ScrollView {
            horizontal-scrollbar-policy: always-off;
            min-width: ssc_feature_view.min-width;
            viewport-height: ssc_feature_view.min-height;
            ssc_feature_view := VerticalLayout {
                spacing: 16px;
                for feature in root.ssc-features: CollapsibleView {
                    text: feature.name;
                    font-color: PaletteExtra.accented-control-foreground;
                    VerticalLayout {
                        alignment: start;
                        HorizontalSeparator {
                            background: Palette.background;
                        }

                        NameValueListView {
                            name_value_pairs: feature.properties;
                        }
                    }
                }
            }
        }
    }
}

export component DiscoveryView {
    in property <ContentStatus> status;
    in property <string> error-message;
    in property <DeviceDiscovery> discovery;
    HorizontalLayout {
        if root.status == ContentStatus.loading: LoadingView { }
        if root.status == ContentStatus.error: ErrorView {
            error: root.error-message;
        }
        if root.status == ContentStatus.success: SplitView {
            common-features: root.discovery.common-features;
            ssc-features: root.discovery.ssc-features;
        }
    }
}

export component LivePreviewTest_Success inherits DiscoveryView {
    status: ContentStatus.success;
    discovery: ExampleData.description.discovery;
}
