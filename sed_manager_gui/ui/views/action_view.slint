import { Island, PaletteExtra } from "../widgets/visual.slint";
import { ContentStatus } from "../data/content_status.slint";
import { Button, Palette, Spinner } from "std-widgets.slint";
import { ActionResult} from "../data/action_result.slint";
import { SolidPopupWindow } from "../widgets/solid_popup_window.slint";


component BackButton inherits Rectangle {
    in property <bool> enabled;
    private property <color> text-color: area.has-hover && enabled ? PaletteExtra.accented-control-foreground : Palette.control-foreground.with-alpha(enabled ? 1.0 : 0.5);
    callback clicked <=> area.clicked;
    width: 32px;
    height: 32px;
    background: #00000000;
    border-radius: Math.min(self.width, self.height) / 2;
    border-color: text-color;
    border-width: 2px;
    Image {
        source: @image-url("../../images/shape/8666600_arrow_left_icon.svg");
        colorize: text-color;
    }

    area := TouchArea {
        enabled: enabled;
    }
}

component Header inherits Island {
    in property <string> device-name;
    in property <string> action-name;
    in property <bool> back-enabled: true;
    callback back <=> back-button.clicked;
    preferred-height: content.min-height;
    content := HorizontalLayout {
        spacing: 12px;
        padding-top: 4px;
        padding-bottom: 4px;
        padding-left: 12px;
        padding-right: 12px;
        VerticalLayout {
            alignment: space-around;
            back-button := BackButton {
                enabled: back-enabled;
            }
        }

        Text {
            text: device-name;
            font-size: 28px;
            font-weight: 800;
            color: PaletteExtra.accented-control-foreground;
            vertical-alignment: center;
        }

        Image {
            source: @image-url("../../images/shape/8666777_chevron_right_arrow_icon.svg");
            colorize: Palette.control-foreground;
            width: 26px;
            vertical-alignment: center;
            horizontal-alignment: center;
            image-fit: ImageFit.contain;
        }

        Text {
            text: action-name;
            font-size: 24px;
            vertical-alignment: center;
            horizontal-stretch: 1;
        }
    }
}

component StatusIndicator {
    in property <ContentStatus> status;
    in property <image> action-icon;
    VerticalLayout {
        alignment: center;
        if status == ContentStatus.loading: Spinner {
            width: 80px;
            height: 80px;
            indeterminate: true;
        }
        if status == ContentStatus.error: Image {
            width: 80px;
            height: 80px;
            source: @image-url("../../images/error/8666566_alert_circle_icon.svg");
            colorize: PaletteExtra.error-foreground;
        }
        if status == ContentStatus.success: Image {
            width: 80px;
            height: 80px;
            source: action-icon;
            colorize: PaletteExtra.success-foreground;
        }
    }
}

component StatusPopup inherits SolidPopupWindow {
    in property <ActionResult> result;
    in property <image> action-icon;
    callback back();
    changed result => {
        root.height = content.min-height;
    }
    width: 260px;
    height: content.min-height;
    content := VerticalLayout {
        padding: 12px;
        spacing: 12px;
        alignment: start;
        HorizontalLayout {
            alignment: center;
            StatusIndicator {
                status: result.status;
                action-icon: action-icon;
            }
        }

        Text {
            text: {
                if result.status == ContentStatus.loading {
                    "Please wait..."
                } else if result.status == ContentStatus.success {
                    "Success!"
                } else {
                    "Failed: " + result.error-message
                }
            }
            horizontal-alignment: center;
            color: {
                if result.status == ContentStatus.loading {
                    Palette.control-foreground
                } else if result.status == ContentStatus.success {
                    PaletteExtra.success-foreground
                } else {
                    PaletteExtra.error-foreground
                }
            }
            wrap: TextWrap.word-wrap;
        }

        HorizontalLayout {
            spacing: 6px;
            alignment: center;
            Button {
                text: "Retry";
                width: 90px;
                enabled: result.status != ContentStatus.loading;
                clicked => {
                    root.close()
                }
            }

            Button {
                text: "Back";
                width: 90px;
                enabled: result.status != ContentStatus.loading;
                clicked => {
                    root.close();
                    root.back();
                }
            }
        }
    }
}

export component ActionView {
    in property <string> device-name;
    in property <string> action-name;
    in property <image> action-icon;
    in property <ActionResult> result: { status: ContentStatus.success };
    private property <bool> back-enabled: result.status != ContentStatus.loading;
    callback back <=> header.back;
    public function start() {
        status-popup.show()
    }
    status-popup := StatusPopup {
        x: form.x + (form.width - self.width) / 2;
        y: form.y + (form.height - self.height) / 2;
        close-policy: no-auto-close;
        result: result;
        action-icon: action-icon;
        back => {
            back()
        }
    }

    VerticalLayout {
        header := Header {
            vertical-stretch: 0;
            device-name: device-name;
            action-name: action-name;
            back-enabled: back-enabled;
        }

        form := HorizontalLayout {
            vertical-stretch: 1;
            spacing: 16px;
            preferred-height: 100%;
            alignment: center;
            VerticalLayout {
                alignment: center;
                @children
            }
        }
    }
}

export component LivePreviewTest inherits ActionView {
    device-name: "Foo Device";
    action-name: "Take ownership";
    timer := Timer {
        interval: 2s;
        running: false;
        triggered => {
            self.running = false;
            root.result = {
                status: ContentStatus.error,
                error-message: "this is a long error message to describe what the hell happened"
            }
        }
    }

    Button {
        text: timer.running ? "Running" : "Start";
        clicked => {
            root.start();
            timer.running = true;
        }
    }
}
