import { NameValueListView } from "../widgets/name_value_list_view.slint";
import { TextLoadingIndicator, ContentStatus } from "../widgets/loading.slint";
import { HorizontalBox, Palette, LineEdit } from "std-widgets.slint";
import { HorizontalSeparator, Island, PaletteExtra } from "../widgets/visual.slint";

export struct AdditionalDrivesModel {
    status: ContentStatus,
    error: string,
    drives: [{error: string, path: string}]
}

component DriveView inherits Island {
    in property <string> drive-path;
    VerticalLayout {
        padding: root.corner-padding(4px);
        spacing: 6px;
        alignment: start;
        HorizontalLayout {
            height: 24px;
            spacing: 12px;
            Text {
                text: "Path:";
                vertical-alignment: center;
            }

            LineEdit {
                horizontal-stretch: 1.0;
                horizontal-alignment: right;
                read-only: true;
                text: drive-path;
            }
        }

        @children
    }
}

component LoadingView {
    VerticalLayout {
        alignment: start;
        spacing: 8px;
        for i in 3: DriveView {
            Rectangle {
                max-height: self.min-height;
                TextLoadingIndicator {
                    min-width: 60px;
                    height: 100%;
                }

                Text {
                    text: "";
                }
            }
        }
    }
}

component ErrorView {
    in property <string> error;
    VerticalLayout {
        alignment: start;
        island := Island {
            HorizontalLayout {
                padding: island.corner-padding(4px);
                spacing: 8px;
                Image {
                    source: @image-url("../../images/error/8666566_alert_circle_icon.svg");
                    colorize: PaletteExtra.error-foreground;
                    min-width: text.min-height;
                    horizontal-stretch: 0.0;
                }

                text := VerticalLayout {
                    alignment: start;
                    spacing: 5px;
                    width: 100%;
                    Text {
                        text: "Error loading drive list:";
                    }

                    Text {
                        text: error;
                        color: PaletteExtra.error-foreground;
                    }
                }
            }
        }
    }
}

component DataView {
    in property <[{ error: string, path: string}]> drives;
    VerticalLayout {
        alignment: start;
        spacing: 8px;
        padding-left: 6px;
        padding-right: 6px;
        padding-top: 5px;
        padding-bottom: 5px;
        for drive in root.drives: DriveView {
            drive-path: drive.path;
            width: 100%;
            HorizontalLayout {
                spacing: 4px;
                alignment: stretch;
                Text {
                    text: "Error opening device:";
                }

                Text {
                    horizontal-stretch: 1.0;
                    text: drive.error;
                    color: PaletteExtra.error-foreground;
                    horizontal-alignment: left;
                }
            }
        }
    }
}

export component AdditionalDrivesPage {
    in property <AdditionalDrivesModel> additional-drives: {
        status: ContentStatus.loading,
    };
    HorizontalLayout {
        alignment: start;
        if additional-drives.status == ContentStatus.loading: LoadingView {
            width: 100%;
        }
        if additional-drives.status == ContentStatus.error: ErrorView {
            error: additional-drives.error;
        }
        if additional-drives.status == ContentStatus.success: DataView {
            drives: additional-drives.drives;
        }
    }
}

export component LivePreviewTest_DataView inherits DataView {
    drives: [
        { path: "/dev/drive1", error: "error 1" },
        { path: "/dev/drive2", error: "error 2" },
    ];
}

export component LivePreviewTest_Loading inherits AdditionalDrivesPage {
    additional-drives: {
        status: ContentStatus.loading,
    };
}

export component LivePreviewTest_Error inherits AdditionalDrivesPage {
    additional-drives: {
        status: ContentStatus.error,
        error: "failed",
    };
}

export component LivePreviewTest_Data inherits AdditionalDrivesPage {
    additional-drives: {
        status: ContentStatus.success,
        drives: [
            { path: "/dev/drive1", error: "error 1" },
            { path: "/dev/drive2", error: "error 2" },
        ]
    };
}
